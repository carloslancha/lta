enum CardsType {
    WHITE
    YELLOW
    RED
    BLACK
}

enum PoulesType {
  POSITIONING
  QUALIFICATION
}

type Academy {
    id: ID!
    name: String!
    country: String!
	createdBy: User
	schools: [School!]
}

type Assault {
    cards: [Card!]
    doppio: Boolean
    id: ID!
    match: Match
    nullo: Boolean
    number: Int!
    winner: Player
}

type AuthPayload {
	token: String
	user: User
}

type Card {
    assault: Assault!
    id: ID!
    reason: String
    type: CardsType!
    player: Player!
}

type Clan {
    createdBy: User
    id: ID!
    name: String!
	players: [Player!]
    school: School!
}

type Form {
    createdBy: User
    id: ID!
    name: String!
	player: [Player!]
}

type Match {
    assaults: [Assault!]
    createdBy: User
    duration: Int
    id: ID!
    order: Int!
    player1: Player!
    player2: Player!
    poule: Poule!
    resultPlayer1: Int
    resultPlayer2: Int
}

type Mutation {
	signup(email: String!, password: String!, name: String!): AuthPayload
	login(email: String!, password: String!): AuthPayload

	createAcademy(name: String!, country: String!): Academy!
	deleteAcademy(id: ID!): Academy
	updateAcademy(id: ID!, name: String, country: String): Academy

	createSchool(name: String!, academyId: ID!): School!
	deleteSchool(id: ID!): School
	updateSchool(id: ID!, name: String, academyId: ID): School

	createClan(name: String!, schoolId: ID!): Clan!
	deleteClan(id: ID!): Clan
	updateClan(id: ID!, name: String, schoolId: ID): Clan
	
	createForm(name: String!): Form!
	deleteForm(id: ID!): Form
	updateForm(id: ID!, name: String): Form

	createPlayer(name: String!, familyName: String!, nickname: String!, formIds: [ID!], clanId: ID!): Player!
	deletePlayer(id: ID!): Player
	updatePlayer(id: ID!, name: String, familyName: String, nickname: String, formIds: [ID!], clanId: ID): Player

	createTournament(name: String!, playerIds: [ID!], poulesType: PoulesType!): Tournament!
	deleteTournament(id: ID!): Tournament
	updateTournament(id: ID!, name: String, playerIds: [ID!], poulesType: PoulesType!): Tournament
	generateTournamentPoules(tournamentId: ID!): Tournament!

}

type Player {
    clan: Clan!
    createdBy: User
    familyName: String!
    forms: [Form!]
    id: ID!
	matches: [Match!]
    name: String!
    nickname: String!
	poules: [Poule!]
	tournaments: [Tournament!]
}

type Poule {
    createdBy: User
	id: ID!
    matches: [Match!]
	name: String!
	players: [Player!]!
	tournament: Tournament!
}

type Query {
	info: String!

	academies: [Academy!]!
	academy(id: ID!): Academy

	forms: [Form!]!
	form(id: ID!): Form

	clans: [Clan!]!
	clan(id: ID!): Clan

	player(id: ID!): Player
	players: [Player!]!

	poule(id: ID!): Poule
	poules: [Poule!]!

	schools: [School!]!
	school(id: ID!): School

	tournaments: [Tournament!]!
	tournament(id: ID!): Tournament
}

type School {
    academy: Academy!
	clans: [Clan!]
    createdBy: User
    id: ID!
    name: String!
}

type Subscription {
	newAcademy: Academy
}

type Tournament {
    createdBy: User
	id: ID!
    name: String!
	players: [Player!]
	poules: [Poule!]
	poulesType: PoulesType!
}

type User {
    academies: [Academy!]
    clans: [Clan!]
    email: String!
    forms: [Form!]
    id: ID!
    name: String!
    password: String!
    players: [Player!]
    poules: [Poule!]
    schools: [School!]
    tournaments: [Tournament!]
}